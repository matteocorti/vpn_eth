#!/bin/sh

# Copyright (c) 2024 Matteo Corti <matteo.corti@ethz.ch>

# Metadata allows your plugin to show up in the app, and website.
#
#  <xbar.title>ETH VPN</xbar.title>
#  <xbar.version>1.3.0</xbar.version>
#  <xbar.author>Michele Marcionelli, Matteo Corti</xbar.author>
#  <xbar.author.github>matteocorti</xbar.author.github>
#  <xbar.desc>Shows the status of the ETH VPN connection</xbar.desc>
#  <xbar.dependencies>vpn_eth</xbar.dependencies>

VPN="/opt/cisco/secureclient/bin/vpn"
VERSION=1.3.0

SETTINGS=~/.vpn_eth.rc
VPZS_CACHE=~/.vpn_eth.vpzs
REALMS_CACHE=~/.vpn_eth.realms
XBAR=

################################################################################
# Prints an error message and exits
#  $1 error message
error() {
    if [ -z "${XBAR}" ]; then
        echo "Error: $1" 1>&2
    else
        echo "Error | color=red"
        echo "---"
        echo "$1"
        if [ -n "$2" ]; then
            echo "$2"
        fi
    fi
    exit
}

if [ -n "${SSH_CLIENT}" ]; then
    error "You are connected via SSH. The keychain is not accessible."
fi

if [ -r "${SETTINGS}" ]; then

    # shellcheck disable=SC1090
    . "${SETTINGS}"
    eval 'REALM=$REALM1'
    eval 'VPZ=$VPZ1'
fi

################################################################################
# Defines a default setting
#  $1 variable (setting) name
#  $2 prompt
define_setting() {

    VARIABLE=$1
    NAME=$2

    if ! grep -q "^${VARIABLE}=" "${SETTINGS}"; then

        eval "input=\$${VARIABLE}"

        if [ -z "${input}" ]; then
            # the user did not specified the value on the command line --> ask
            printf "Please specify the %s: " "${NAME}"
            read -r input
        fi
        echo "${VARIABLE}=${input}" >>"${SETTINGS}"

    else

        if [ -n "${VERBOSE}" ]; then
            value=$(grep "^${VARIABLE}=" "${SETTINGS}" | sed 's/.*=//')
            echo "${VARIABLE} is already defined with the value '${value}'"
        fi

    fi

}

require_setting() {
    variable=$1
    eval "value=\$${variable}"
    if [ -z "${value}" ]; then
        error "${variable} is not defined. Please use the init command or specify the value with the corresponding option"
    fi
}

################################################################################
# Caches a parameter
#  $1 cache file
#  $2 parameter
cache() {

    cache_file=$1
    parameter=$2

    if ! [ -r "${cache_file}" ]; then
        touch "${cache_file}"
    fi

    if ! grep -q "^${parameter}$" "${cache_file}"; then
        echo "${parameter}" >>"${cache_file}"
    fi

}

################################################################################
# Gets a password from the keychain and sets it if not available (initialization)
#  $1 account name
#  $2 service
#  $3 name
#  returns the password in the 'password' variable
get_from_keychain() {

    account=$1
    service=$2
    name=$3

    if security find-generic-password -a "${account}" -s "${service}" -w >/dev/null 2>&1; then
        password=$(security find-generic-password -a "${account}" -s "${service}" -w)
    else

        # read -s is not POSIX but works on macOS (and this script is macOS-only)
        # shellcheck disable=SC3045
        read -s -r -p "Please specify ${name}: " password
        echo

        # shellcheck disable=SC2154
        security add-generic-password -a "${account}" -s "${service}" -l "${name} for ${account}" -w "${password}"

    fi

}

################################################################################
# Checks if a given program is available and executable
# Params
#   $1 program name
# Returns 1 if the program exists and is executable
check_required_prog() {

    PROG=$(command -v "$1" 2>/dev/null)

    if [ -z "${PROG}" ]; then
        error "cannot find required program: $1"
    fi

    if [ ! -x "${PROG}" ]; then
        error "${PROG} is not executable"
    fi

}

################################################################################
# Initialize the settings
init() {

    if [ -r "${SETTINGS}" ]; then
        echo "A settings file (${SETTINGS}) already exists."
        echo "You can edit it, or remove it before using the 'init' command to regenerate it."
    else

        # create the settings file
        touch "${SETTINGS}"

        define_setting SERVER "VPN server"
        define_setting USER "user"
        define_setting REALM "realm"
        define_setting VPZ "vpz"

        # check if the password is stored
        #radius_password=$( get_from_keychain "${USER}@${REALM}.ethz.ch" "eth_radius" "RADIUS password" )
        get_from_keychain "${USER}" "eth_radius" "RADIUS password"
        get_from_keychain "${USER}" "eth_otp_secret" "OTP secret"

    fi

}

################################################################################
# Prints usage information
# Params
#   $1 error message (optional)
usage() {

    # Delimiter at 78 chars ############################################################
    echo
    echo "Usage: vpn_eth.sh [ command ] [OPTIONS]"
    echo
    echo "Commands:"
    echo "   connect,c                       Connects"
    echo "   disconnect,d                    Disconnects"
    echo "   init,i                          Initializes the default settings"
    echo "   stats                           Shows the connection statistics"
    echo "   status,s                        Shows the connection status"
    echo
    echo "Options:"
    echo "   -h,--help,-?                    This help message"
    echo "   -r,--realm realm                Realm"
    echo "   -s,--server server              VPN server"
    echo "   -u,--user user                  User"
    echo "   -v,--version                    Prints the script version number"
    echo "   -z,--vpz vpz                    VPZ"
    echo
    echo "Report bugs to https://github.com/matteocorti/vpn_eth/issues"
    echo

    # Delimiter at 78 chars ############################################################

    exit

}

################################################################################
# Checks if there is an option argument (should not begin with -)
#
# Params
#  $1 name of the option (e.g., '-w,--warning') to be used in the error message
#  $2 next command line parameter
check_option_argument() {

    # shellcheck disable=SC2295
    if [ -z "$2" ] || [ "${2%${2#?}}"x = '-x' ]; then
        error "'${1}' requires an argument"
    fi

}

check_required_prog oathtool
check_required_prog "${VPN}"

PWD=$(pwd)
if [ "${PWD}" = "${HOME}/Library/Application Support/xbar/plugins" ]; then

    XBAR=1

    # see https://github.com/matryer/xbar-plugins/blob/main/CONTRIBUTING.md

    eval "REALM=\$REALM$2"
    eval "VPZ=\$VPZ$2"

    # menu item handlers
    if [ "$1" = "turn_vpn_off" ]; then
        ${VPN} disconnect
    elif [ "$1" = "turn_vpn_on" ]; then

        # get the credentials from macOS keychain

        get_from_keychain "${USER}" "eth_radius" "RADIUS password"
        radius_password="${password}"
        if [ -z "${radius_password}" ]; then
            error "RADIUS password not defined" "Please run 'vpn_eth init' on the command line"
        fi

        get_from_keychain "${USER}" "eth_otp_secret" "OTP secret"
        otp_secret="${password}"
        otp_code=$(oathtool --totp=sha1 --time-step-size=30 -b "${otp_secret}")

        printf "%s@%s.ethz.ch\n%s\n%s\n" "${USER}" "${REALM}" "${radius_password}" "${otp_code}" |
            ${VPN} -s connect "https://${SERVER}/${VPZ}" >/dev/null 2>&1

    fi

    # Running as an xbar plugin

    stats=$("${VPN}" stats)

    # set isVpnOn (connected => true; disconnected => false)
    if echo "${stats}" | grep "Connection State" | grep -v Management | grep -q Connected; then
        isVpnOn=true
    else
        isVpnOn=false
    fi

    # shellcheck disable=SC2154
    if "${XBARDarkMode}"; then
        color='white'
    else
        color='gray'
    fi

    # set isOnline
    if ping -Q -o -t 2 "${SERVER}" >/dev/null 2>&1; then
        isOnline=true
    else
        isOnline=false
    fi

    # menu title
    if "${isOnline}"; then
        if "${isVpnOn}"; then
            echo "VPN | color=green"
        else
            echo "VPN | color=${color}"
        fi
    else
        echo "VPN | color=red"
    fi

    # separator
    echo "---"

    # menu items
    if ${isVpnOn}; then
        echo "üü¢ VPN connected to https://${SERVER}/${VPZ}"
        echo "-> as ${USER}@${REALM}.ethz.ch"

        since=$(echo "${stats}" | grep Duration | awk '{print $2}' | sed 's/:..$//')
        echo "Since ${since} (hh:mm)"

        echo "${stats}" | grep -E 'Client Address|Bytes (Sent|Received)|Prot|Cipher' |
            sed 's/^ *//; s/:  */: /'
        echo "Disconnect | bash='$0' param1=turn_vpn_off terminal=false refresh=true"
        echo "Refresh statistics | refresh=true"
    else
        if ping -Q -o -t 2 "${SERVER}" >/dev/null 2>&1; then
            echo "üî¥ VPN disconnected"
            for varRealm in $(set | grep '^REALM.='); do
                param2=$(echo "${varRealm}" | head -c 6 | tail -c 1)
                echo "Connect to ¬´${varRealm#*=}¬ª | bash='$0' param1=turn_vpn_on param2=${param2} terminal=false refresh=true"
            done
        else
            echo "‚ö†Ô∏è  no internet connection"
        fi
    fi

else

    while true; do

        case "$1" in

        ########################################
        # Options without arguments

        -h | --help | -\?)
            usage
            ;;

        --version)
            echo "vpn_eth version ${VERSION}"
            exit
            ;;

        -v | --verbose)
            VERBOSE=1
            shift
            ;;

        ########################################
        # Commands

        connect | c)
            COMMAND=connect
            shift
            ;;

        disconnect | d)
            COMMAND=disconnect
            shift
            ;;

        init | i)
            COMMAND=init
            shift
            ;;

        status | s)
            COMMAND=status
            shift
            ;;

        stats)
            COMMAND=stats
            shift
            ;;

        ########################################
        # Options with one argument

        -r | --realm)
            check_option_argument '-r,--realm' "$2"
            REALM="$2"
            shift 2
            ;;

        -s | --server)
            check_option_argument '-s,--server' "$2"
            SERVER="$2"
            shift 2
            ;;

        -u | --user)
            check_option_argument '-u,--user' "$2"
            USER="$2"
            shift 2
            ;;

        -z | --vpz)
            check_option_argument '-z,--vpz' "$2"
            VPZ="$2"
            shift 2
            ;;

        ########################################
        # Special
        --)
            shift
            break
            ;;

        *)
            if [ -n "$1" ]; then
                error "invalid option or command: '${1}'"
            fi
            break
            ;;
        esac

    done

    cache "${VPZS_CACHE}" "${VPZ}"
    cache "${REALMS_CACHE}" "${REALM}"

    case "${COMMAND}" in

    connect)

        # get the credentials from macOS keychain
        get_from_keychain "${USER}" "eth_radius" "RADIUS password"
        radius_password="${password}"
        get_from_keychain "${USER}" "eth_otp_secret" "OTP secret"
        otp_secret="${password}"

        if ! otp_code=$(oathtool --totp=sha1 --time-step-size=30 -b "${otp_secret}" 2>/dev/null); then
            error "cannot generate OTP code (check the OTP secret in the keychain)"
        fi

        require_setting SERVER
        require_setting VPZ
        require_setting REALM

        if [ -n "${VERBOSE}" ]; then
            printf "%s@%s.ethz.ch\n%s\n%s\n" "${USER}" "${REALM}" "${radius_password}" "${otp_code}" |
                ${VPN} -s connect "https://${SERVER}/${VPZ}"
        else
            printf "%s@%s.ethz.ch\n%s\n%s\n" "${USER}" "${REALM}" "${radius_password}" "${otp_code}" |
                ${VPN} -s connect "https://${SERVER}/${VPZ}" 2>&1 |
                grep 'error:' |
                sed 's/^.*>> e/E/'
        fi

        ;;

    disconnect)

        if ${VPN} status | grep -q Connected; then

            if [ -n "${VERBOSE}" ]; then
                ${VPN} disconnect
            else
                ${VPN} disconnect >/dev/null
            fi

        fi

        ;;

    init)

        init
        ;;

    status)

        if [ -n "${VERBOSE}" ]; then
            ${VPN} status
        else
            ${VPN} status |
                grep 'state:' |
                tail -n 1 |
                sed 's/^.*: //'
        fi

        ;;

    stats)

        if [ -n "${VERBOSE}" ]; then
            ${VPN} stats
        else

            # try to leave only the essential information

            ${VPN} stats |
                grep '[a-zA-Z0-9]' |
                grep '^[[:blank:]]' |
                sed 's/^[[:blank:]]*//'

        fi

        ;;

    *)
        if [ -n "${COMMAND}" ]; then
            error "Unknown command ${COMMAND}"
        else
            error "Please specify a command (connect, disconnect, init or status)"
        fi
        ;;

    esac

fi
